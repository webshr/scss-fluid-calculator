@use "sass:math";
@use "sass:string";
@use 'helpers';

// Singular clamp

@function calculateClamp($params) {
  $unit: 0.0625rem;
  @if (map-get($params, "usePx")) {
    $unit: 1px;
  }

  $relativeUnit: 1vw;
  @if (map-get($params, "relativeTo") == "container") {
    $relativeUnit: 1cqi;
  }
  @if (map-get($params, "relativeTo") == "viewport") {
    $relativeUnit: 1vi;
  }

  $isNegative: map-get($params, "minSize") > map-get($params, "maxSize");
  $min: map-get($params, "minSize");
  $max: map-get($params, "maxSize");

  @if ($isNegative) {
    $min: map-get($params, "maxSize");
    $max: map-get($params, "minSize");
  }

  // Apply multipliers if provided
  $minBaseMultiplier: if(map-get($params, "minBaseMultiplier") != null, map-get($params, "minBaseMultiplier"), 1);
  $maxBaseMultiplier: if(map-get($params, "maxBaseMultiplier") != null, map-get($params, "maxBaseMultiplier"), 1);

  $min: $min * $minBaseMultiplier;
  $max: $max * $maxBaseMultiplier;

  $slope: math.div((map-get($params, "maxSize") - map-get($params, "minSize")), (map-get($params, "maxWidth") - map-get($params, "minWidth")));
  $intersection: (-1 * map-get($params, "minWidth")) * $slope + map-get($params, "minSize");
  @return "clamp(#{helpers.roundValue($min * $unit)}, calc(#{helpers.roundValue($intersection * $unit)} + #{helpers.roundValue($slope * 100) * $relativeUnit}), #{helpers.roundValue($max * $unit)})";
}

// Size
@function calculateSize($config, $viewport, $step) {
  $scale: helpers.range(map-get($config, 'minWidth'), map-get($config, 'maxWidth'), map-get($config, 'minScale'), map-get($config, 'maxScale'), $viewport);
  $size: helpers.range(map-get($config, 'minWidth'), map-get($config, 'maxWidth'), map-get($config, 'minSize'), map-get($config, 'maxSize'), $viewport);
  @return $size * math.pow($scale, $step);
}

@function calculateStep($config, $step) {
  $minSize: calculateSize($config, map-get($config, 'minWidth'), $step);
  $maxSize: calculateSize($config, map-get($config, 'maxWidth'), $step);

  @return (
    "step": $step,
    "minSize": $minSize,
    "maxSize": $maxSize,
    "clamp": calculateClamp((
      "minWidth": map-get($config, "minWidth"),
      "maxWidth": map-get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "relativeTo": map-get($config, "relativeTo"),
      "minBaseMultiplier": map-get($config, "minBaseMultiplier"),
      "maxBaseMultiplier": map-get($config, "maxBaseMultiplier")
    ))
  );
}

@function calculateScale($config) {
  $steps: helpers.newList(calculateStep($config, 0));

  $positiveSteps: helpers.getDefault($config, "positiveSteps", 0);
  @if ($positiveSteps != 0) {
    @for $i from 1 through $positiveSteps {
      $steps: append($steps, calculateStep($config, $i));
    }
  }

  $negativeSteps: helpers.getDefault($config, "negativeSteps", 0);
  @if ($negativeSteps != 0) {
    @for $i from 1 through $negativeSteps {
      $steps: helpers.prepend($steps, calculateStep($config, -1 * $i));
    }
  }

  @return $steps;
}

// Clamps

@function calculateClamps($config) {
  $pairs: ();

  @each $item in map-get($config, "pairs") {
    $min: nth($item, 1);
    $max: nth($item, 2);
    $pairs: append($pairs, (
      "label": "#{$min}-#{$max}",
      "clamp": calculateClamp((
        "minWidth": map-get($config, "minWidth"),
        "maxWidth": map-get($config, "maxWidth"),
        "minSize": $min,
        "maxSize": $max,
        "usePx": map-get($config, "usePx"),
        "relativeTo": map-get($config, "relativeTo"),
        "minBaseMultiplier": map-get($config, "minBaseMultiplier"),
        "maxBaseMultiplier": map-get($config, "maxBaseMultiplier")
      ))
    ));
  }

  @return $pairs;
}

// Mixins

// Mixin to generate CSS variables for type scale
@mixin generateFluidScale($config) {
  $prefix: helpers.getDefault($config, "prefix", "text-");
  $format: "clamp";

  @each $step in calculateScale($config) {
    $label: helpers.getLabel(map-get($step, "step"));
    $clamp: map-get($step, $format); 
    --#{$prefix}#{$label}: #{$clamp};
  }
}

@mixin generateFluidScalePx($config) {
  $prefix: helpers.getDefault($config, "prefix", "step-");
  $format: "clamp";
  @if (map-get($config, "usePx")) {
    $format: "clampPx";
  }

  $scale: calculateScale($config);
  @each $size in map-get($scale, "sizes") {
    --#{$prefix}#{map-get($size, "step")}: #{map-get($size, $format)};
  }
}

@mixin generateClamp($config) {
  $prefix: helpers.getDefault($config, "prefix", "space-");
  $min: map-get($config, "minSize");
  $max: map-get($config, "maxSize");
  --#{$prefix}: #{calculateClamp($config)};
}

@mixin generateClamps($config) {
  $prefix: helpers.getDefault($config, "prefix", "space-");
  $clamps: calculateClamps($config);
  @each $size in $clamps {
    --#{$prefix}#{map-get($size, "label")}: #{map-get($size, "clamp")};
  }
}